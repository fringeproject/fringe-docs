{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"FringeProject Documentation This is the official documentation for the FringeProject . here you can access various information on the website. If you have any question on the project, feel free to send me an email at contact@fringeproject.com . You can find documentation for: User and how to use the website Runner and how we scan the Internet How to create a workflow with a runner The API to search and add assets","title":"Home"},{"location":"#fringeproject-documentation","text":"This is the official documentation for the FringeProject . here you can access various information on the website. If you have any question on the project, feel free to send me an email at contact@fringeproject.com . You can find documentation for: User and how to use the website Runner and how we scan the Internet How to create a workflow with a runner The API to search and add assets","title":"FringeProject Documentation"},{"location":"api/","text":"API Overview The Frontend ( fringe-frontend ) uses the API from the backend ( fringe-core ). You are free to use the API directly without using the Web page. Basic usage The API is available on the api subdomain of fringeproject.com . Here is an example of a valid API call: curl \"https://api.fringeproject.com/api/search?q=uber.com\" The API returns data using the JSON format. Authentication Most of the endpoints require authentication. So you need a valid session to requests private data or bypass daily-request-quota. curl -H \"Content-Type: application/json\" \\ -d '{\"username\": \"YOUR USERNAME\", \"password\": \"YOUR PASSWORD\"}' \\ -X POST \"https://api.fringeproject.com/api/accounts/login\" Session As we are still developing, we are providing a dead simple cookie to authenticate users. Endpoints As the API endpoints are evolving everyday, we cannot provide an accurate list of endpoint and call examples. But you can check how the fringe-frontend use the API. Rate Limit There is a rate limit set for anonymous and authenticated users. The current limits are: Anonymous users: 100 requests/day . Authenticated users: 1000 requests/day . For anonymous users, the limit is set based on your IP. So if you change your IP (hello Tor!), you may request more data.","title":"API"},{"location":"api/#api","text":"","title":"API"},{"location":"api/#overview","text":"The Frontend ( fringe-frontend ) uses the API from the backend ( fringe-core ). You are free to use the API directly without using the Web page.","title":"Overview"},{"location":"api/#basic-usage","text":"The API is available on the api subdomain of fringeproject.com . Here is an example of a valid API call: curl \"https://api.fringeproject.com/api/search?q=uber.com\" The API returns data using the JSON format.","title":"Basic usage"},{"location":"api/#authentication","text":"Most of the endpoints require authentication. So you need a valid session to requests private data or bypass daily-request-quota. curl -H \"Content-Type: application/json\" \\ -d '{\"username\": \"YOUR USERNAME\", \"password\": \"YOUR PASSWORD\"}' \\ -X POST \"https://api.fringeproject.com/api/accounts/login\"","title":"Authentication"},{"location":"api/#session","text":"As we are still developing, we are providing a dead simple cookie to authenticate users.","title":"Session"},{"location":"api/#endpoints","text":"As the API endpoints are evolving everyday, we cannot provide an accurate list of endpoint and call examples. But you can check how the fringe-frontend use the API.","title":"Endpoints"},{"location":"api/#rate-limit","text":"There is a rate limit set for anonymous and authenticated users. The current limits are: Anonymous users: 100 requests/day . Authenticated users: 1000 requests/day . For anonymous users, the limit is set based on your IP. So if you change your IP (hello Tor!), you may request more data.","title":"Rate Limit"},{"location":"development/","text":"Beta & Development Beta phase FringeProject is still in active development. What does it mean? If you use our frontend API directly, we may change some calls without notice. The runner may fail while scanning the Internet. Because we are still developing our platform, we need feedback and testers. If you want to help us, that good! Please send us a notification by email. Open source Some parts of the project are open-source such as: fringe-runner : a go cross-platform executable we use to execute jobs . fringe-docs : a mkdocs static website to generate this documentation. Help Us Improve the Docs <3 If you'd like to contribute an improvement to the project, simply fork the repository and submit a pull request. Thank you!","title":"Development"},{"location":"development/#beta-development","text":"","title":"Beta &amp; Development"},{"location":"development/#beta-phase","text":"FringeProject is still in active development. What does it mean? If you use our frontend API directly, we may change some calls without notice. The runner may fail while scanning the Internet. Because we are still developing our platform, we need feedback and testers. If you want to help us, that good! Please send us a notification by email.","title":"Beta phase"},{"location":"development/#open-source","text":"Some parts of the project are open-source such as: fringe-runner : a go cross-platform executable we use to execute jobs . fringe-docs : a mkdocs static website to generate this documentation.","title":"Open source"},{"location":"development/#help-us-improve-the-docs-3","text":"If you'd like to contribute an improvement to the project, simply fork the repository and submit a pull request. Thank you!","title":"Help Us Improve the Docs &lt;3"},{"location":"perimeters/","text":"Perimeters A Perimeter is an environment where you can add data and create your own discovery rules. You can see a perimeter as a new worksheet where you manage your data. With a runner you can find new data and do some active and passive scans. See a perimeter as hostname or IP you have to audit or even bug bounty program. Create a new perimeter In this paragraph we will create a new perimeter for a bug-bounty program. Let's call it First perimeter and add a description such as Let's try FringeProject . If you have already so data, you can add it. Be careful, we parse only hostname and IP as data. Moreover, each data must be separated by a new line. Then click on \"Create\" and to create your first perimeter! Rules On the perimeter dashboard, you should see that there is more data that you have previously added. Why? It's because we have created so custom rules for you. For example, we try to resolve every hostname to get IP addresses and we get some informations on IP too. Defaults rules Here are the default rules: Hostname Resolution : Resolve a hostname IP info : retrieve IP informations Create a New Rule You can create a new rule on you perimeter. We provide various modules that perform simple tasks based on some perimeter events . Let's create a rule that scan every new IP: rule name : The name you want to give to your rule, Auto TCP scan rule description (optional): A description for your rule module : Select the module to execute, here nmap Perimeter event : Select on what event the rule is triggered, here New data Note that IP that already exists are not scan because the rule applies only to new IP. If you want to apply the rule to new and old IP, then you have to check the case Apply scan to data already found . Doing this we will add a new job for data that already exist. Now that you have your new rule, there will be a new job every time you add a new IP or the runner finds a new one. Pending Jobs You can see the backlog of the job for your perimeter.","title":"Perimeters"},{"location":"perimeters/#perimeters","text":"A Perimeter is an environment where you can add data and create your own discovery rules. You can see a perimeter as a new worksheet where you manage your data. With a runner you can find new data and do some active and passive scans. See a perimeter as hostname or IP you have to audit or even bug bounty program.","title":"Perimeters"},{"location":"perimeters/#create-a-new-perimeter","text":"In this paragraph we will create a new perimeter for a bug-bounty program. Let's call it First perimeter and add a description such as Let's try FringeProject . If you have already so data, you can add it. Be careful, we parse only hostname and IP as data. Moreover, each data must be separated by a new line. Then click on \"Create\" and to create your first perimeter!","title":"Create a new perimeter"},{"location":"perimeters/#rules","text":"On the perimeter dashboard, you should see that there is more data that you have previously added. Why? It's because we have created so custom rules for you. For example, we try to resolve every hostname to get IP addresses and we get some informations on IP too.","title":"Rules"},{"location":"perimeters/#defaults-rules","text":"Here are the default rules: Hostname Resolution : Resolve a hostname IP info : retrieve IP informations","title":"Defaults rules"},{"location":"perimeters/#create-a-new-rule","text":"You can create a new rule on you perimeter. We provide various modules that perform simple tasks based on some perimeter events . Let's create a rule that scan every new IP: rule name : The name you want to give to your rule, Auto TCP scan rule description (optional): A description for your rule module : Select the module to execute, here nmap Perimeter event : Select on what event the rule is triggered, here New data Note that IP that already exists are not scan because the rule applies only to new IP. If you want to apply the rule to new and old IP, then you have to check the case Apply scan to data already found . Doing this we will add a new job for data that already exist. Now that you have your new rule, there will be a new job every time you add a new IP or the runner finds a new one.","title":"Create a New Rule"},{"location":"perimeters/#pending-jobs","text":"You can see the backlog of the job for your perimeter.","title":"Pending Jobs"},{"location":"runner/","text":"Runner On FringeProject, users provide assets (IP, hostname, ...). The fringe-runner gathers and retrieves information about those assets such as web pages, open ports, and used technologies. Overview The tool that we called fringe-runner scans a host based on several modules. The user may start the runner manually to scan an asset or run it as a daemon to interact with the backend ( fringe-api ). Installation fringe-runner is written in Go. First, you need to install Go . After this process, you can simply go get the tool: go get github.com/fringeproject/fringe-runner Buiding from source Clone the repository to your local machine and move to the runner folder: git clone https://github.com/fringeproject/fringe-runner.git cd fringe-runner As we use Go Modules the dependencies are downloaded the first time you start the runner. go get && go build This will build the binary fringe-runner . If you want to install it to the Go path you can run: go install You can also build the runner yourself for multiple environments with the following command: make build This command build in the bin directory the binaries for the following OS: linux/amd64 linux/386 darwin/amd64 darwin/386 windows/amd64 windows/386 Docker A Docker image of the latest build is available on DockerHub : docker run -it --rm fringeproject/fringe-runner:latest <cmd> You can also build the image yourself: docker build . ---> <image_id> docker run -it <image_id> <cmd> Update the resources Once you install the binary, the following command displays the information about the runner: fringe-runner --version Version: development version Git revision: HEAD Git branch: HEAD GO version: go1.14.3 Built: unknown OS/Arch: darwin/amd64 Then, you need to download the resources (wordlist, ...) to the fringe folder: fringe-runner update Start a scan manually First, you list the modules available: fringe-runner module -L This command outputs a list of modules as a JSON format. Choose one of them, for instance crtsh to get the subdomains of a hostname using the service crt.sh : fringe-runner module -m crtsh -a uber.com Based on the results of the service, the runner outputs a list of new assets. Scan using the backend The scans are triggered using perimeter rules from the backend. For example, when there is a new hostname , then we resolve it to get IP addresses and we try to find new subdomains using OSINT techniques. The new assets are also added to the scan pool to find more new assets. Each time there is a new module to be called be the runner, we call this a job . On your perimeter, we'll provided the ability to add a new runner. Configure the runner with the config.yml file, the you can start scanning your perimeter with: fringe-runner run Configuration You can pass configuration as a YAML file. There is an example in the repository . You can pass the configuration path as an argument to -c/--config : fringe-runner -c file/path/config.yml <other arguments> By default, the runner looks for the file .fringe-runner.yml in the user home directory ( ~/.fringe-runner.yml or %USERPROFILE%\\.fringe-runner.yml on Windows). Resources The runner uses resources to work properly. For instance, the wappalyzer module needs the database file name wappalyzer.json . It downloads the resources with the update command and stores these in the directory set as resources in the configuration file. If there is no configuration file or the resources set, the the following path will be used: $HOME/.fringe-runner/resources/ Where HOME is the user home directory ( %USERPROFILE% on Windows). Data source The fringe-runner scans the Internet for you to find augment the data you provide. To achieve this, we collect information using modules: Scan modules: Ask the information directly to the source. That mean we scan for web pages, open ports and available services. Public sources modules: Ask informations about a source to a public source (such as Shodan or Crt.sh ). There is a list of available modules in the README on the repository If you don't want to be scanned please send a e-mail to contact@fringeproject.com . Please note that users may use the runner on their own. We are not responsible for any harm related to the use of fringe-runner .","title":"Runner"},{"location":"runner/#runner","text":"On FringeProject, users provide assets (IP, hostname, ...). The fringe-runner gathers and retrieves information about those assets such as web pages, open ports, and used technologies.","title":"Runner"},{"location":"runner/#overview","text":"The tool that we called fringe-runner scans a host based on several modules. The user may start the runner manually to scan an asset or run it as a daemon to interact with the backend ( fringe-api ).","title":"Overview"},{"location":"runner/#installation","text":"fringe-runner is written in Go. First, you need to install Go . After this process, you can simply go get the tool: go get github.com/fringeproject/fringe-runner","title":"Installation"},{"location":"runner/#buiding-from-source","text":"Clone the repository to your local machine and move to the runner folder: git clone https://github.com/fringeproject/fringe-runner.git cd fringe-runner As we use Go Modules the dependencies are downloaded the first time you start the runner. go get && go build This will build the binary fringe-runner . If you want to install it to the Go path you can run: go install You can also build the runner yourself for multiple environments with the following command: make build This command build in the bin directory the binaries for the following OS: linux/amd64 linux/386 darwin/amd64 darwin/386 windows/amd64 windows/386","title":"Buiding from source"},{"location":"runner/#docker","text":"A Docker image of the latest build is available on DockerHub : docker run -it --rm fringeproject/fringe-runner:latest <cmd> You can also build the image yourself: docker build . ---> <image_id> docker run -it <image_id> <cmd>","title":"Docker"},{"location":"runner/#update-the-resources","text":"Once you install the binary, the following command displays the information about the runner: fringe-runner --version Version: development version Git revision: HEAD Git branch: HEAD GO version: go1.14.3 Built: unknown OS/Arch: darwin/amd64 Then, you need to download the resources (wordlist, ...) to the fringe folder: fringe-runner update","title":"Update the resources"},{"location":"runner/#start-a-scan-manually","text":"First, you list the modules available: fringe-runner module -L This command outputs a list of modules as a JSON format. Choose one of them, for instance crtsh to get the subdomains of a hostname using the service crt.sh : fringe-runner module -m crtsh -a uber.com Based on the results of the service, the runner outputs a list of new assets.","title":"Start a scan manually"},{"location":"runner/#scan-using-the-backend","text":"The scans are triggered using perimeter rules from the backend. For example, when there is a new hostname , then we resolve it to get IP addresses and we try to find new subdomains using OSINT techniques. The new assets are also added to the scan pool to find more new assets. Each time there is a new module to be called be the runner, we call this a job . On your perimeter, we'll provided the ability to add a new runner. Configure the runner with the config.yml file, the you can start scanning your perimeter with: fringe-runner run","title":"Scan using the backend"},{"location":"runner/#configuration","text":"You can pass configuration as a YAML file. There is an example in the repository . You can pass the configuration path as an argument to -c/--config : fringe-runner -c file/path/config.yml <other arguments> By default, the runner looks for the file .fringe-runner.yml in the user home directory ( ~/.fringe-runner.yml or %USERPROFILE%\\.fringe-runner.yml on Windows).","title":"Configuration"},{"location":"runner/#resources","text":"The runner uses resources to work properly. For instance, the wappalyzer module needs the database file name wappalyzer.json . It downloads the resources with the update command and stores these in the directory set as resources in the configuration file. If there is no configuration file or the resources set, the the following path will be used: $HOME/.fringe-runner/resources/ Where HOME is the user home directory ( %USERPROFILE% on Windows).","title":"Resources"},{"location":"runner/#data-source","text":"The fringe-runner scans the Internet for you to find augment the data you provide. To achieve this, we collect information using modules: Scan modules: Ask the information directly to the source. That mean we scan for web pages, open ports and available services. Public sources modules: Ask informations about a source to a public source (such as Shodan or Crt.sh ). There is a list of available modules in the README on the repository If you don't want to be scanned please send a e-mail to contact@fringeproject.com . Please note that users may use the runner on their own. We are not responsible for any harm related to the use of fringe-runner .","title":"Data source"},{"location":"user/","text":"User documentation Overview FringeProject allows you to scan and search through various source of information to discover assets and vulnerabilities. Use cases There is several thing you can do with FringeProject: Search through the public database Add an asset we don't find yet Search an asset You can search in the public perimeter using the following link: https://fringeproject.com/search Add a new asset When you add a new asset, we parse it and attach a data-type . It can be: IP: represents a IPv4 (no IPv6 supported for now) Hostname: represents a domain ( fringeproject.com ) or a subdomain ( docs.fringeproject.com ) URL: represents a URL with a Host (IP or Hostname), a Port and a Path We plan to add other data later such as IPv6, TCP/UDP ports or even CIDR. Account You can browse a limited number of asset without being authenticated. If you want to access more features (search more assets, create a perimeter, ...), you will need an account. You sign up to create a new account here or sign in with an existing one here . Account settings You can view your profile here . We grab your avatar from Gravatar based on the email address you provide. Limitation An anonymous user is limited to make 100 requests/day . If you want to get more data, then you need to login. With an authenticated user, the limit is set at 1000 requests/day .","title":"User"},{"location":"user/#user-documentation","text":"","title":"User documentation"},{"location":"user/#overview","text":"FringeProject allows you to scan and search through various source of information to discover assets and vulnerabilities.","title":"Overview"},{"location":"user/#use-cases","text":"There is several thing you can do with FringeProject: Search through the public database Add an asset we don't find yet","title":"Use cases"},{"location":"user/#search-an-asset","text":"You can search in the public perimeter using the following link: https://fringeproject.com/search","title":"Search an asset"},{"location":"user/#add-a-new-asset","text":"When you add a new asset, we parse it and attach a data-type . It can be: IP: represents a IPv4 (no IPv6 supported for now) Hostname: represents a domain ( fringeproject.com ) or a subdomain ( docs.fringeproject.com ) URL: represents a URL with a Host (IP or Hostname), a Port and a Path We plan to add other data later such as IPv6, TCP/UDP ports or even CIDR.","title":"Add a new asset"},{"location":"user/#account","text":"You can browse a limited number of asset without being authenticated. If you want to access more features (search more assets, create a perimeter, ...), you will need an account. You sign up to create a new account here or sign in with an existing one here .","title":"Account"},{"location":"user/#account-settings","text":"You can view your profile here . We grab your avatar from Gravatar based on the email address you provide.","title":"Account settings"},{"location":"user/#limitation","text":"An anonymous user is limited to make 100 requests/day . If you want to get more data, then you need to login. With an authenticated user, the limit is set at 1000 requests/day .","title":"Limitation"},{"location":"workflows/","text":"Workflows A workflow is an automated process to start jobs. You can create workflows to automate assets discovery within a fringe-runner . Create a workflow file A workflow file is a YAML file with a specific structure. The syntax is borrowed from Github Actions . An example of a workflow file: # The name of the workflow name: Find subdomains # The event that triggers the workflow on: # When the runner find a new asset new_asset: # The asset must be a hostname types: hostname # The asset must respect the following regex regex: .*\\.uber\\.com # The jobs to execute jobs: - name: Auto crt.sh module: crtsh - name: Auto Sublist3r module: sublist3r Workflow syntax name The name of the workflow. on We provide the following event name: new_asset - this event is triggered when the runner find a new asset on.new_asset You must select a data-type for the new asset. We trigger the workflow if the new asset has the correct data-type . You can also specify a regex to filter the new assets. types - the asset data-type ( hostname , url , ip ) regex - an optional regex to filter the assets jobs This is a list of modules to execute. The elements of the list are objects with the following fields: name - the name of the job module - the slug of the module to execute Use a workflow The following command trigger a workflow: fringe-runner module -m crtsh -a uber.com -w path/workflow.yml","title":"Workflows"},{"location":"workflows/#workflows","text":"A workflow is an automated process to start jobs. You can create workflows to automate assets discovery within a fringe-runner .","title":"Workflows"},{"location":"workflows/#create-a-workflow-file","text":"A workflow file is a YAML file with a specific structure. The syntax is borrowed from Github Actions . An example of a workflow file: # The name of the workflow name: Find subdomains # The event that triggers the workflow on: # When the runner find a new asset new_asset: # The asset must be a hostname types: hostname # The asset must respect the following regex regex: .*\\.uber\\.com # The jobs to execute jobs: - name: Auto crt.sh module: crtsh - name: Auto Sublist3r module: sublist3r","title":"Create a workflow file"},{"location":"workflows/#workflow-syntax","text":"","title":"Workflow syntax"},{"location":"workflows/#name","text":"The name of the workflow.","title":"name"},{"location":"workflows/#on","text":"We provide the following event name: new_asset - this event is triggered when the runner find a new asset","title":"on"},{"location":"workflows/#onnew_asset","text":"You must select a data-type for the new asset. We trigger the workflow if the new asset has the correct data-type . You can also specify a regex to filter the new assets. types - the asset data-type ( hostname , url , ip ) regex - an optional regex to filter the assets","title":"on.new_asset"},{"location":"workflows/#jobs","text":"This is a list of modules to execute. The elements of the list are objects with the following fields: name - the name of the job module - the slug of the module to execute","title":"jobs"},{"location":"workflows/#use-a-workflow","text":"The following command trigger a workflow: fringe-runner module -m crtsh -a uber.com -w path/workflow.yml","title":"Use a workflow"}]}